import { SelectItem } from '@mantine/core';
import { SchedulerParam } from 'features/parameters/store/parameterZodSchemas';

// zod needs the array to be `as const` to infer the type correctly
// this is the source of the `SchedulerParam` type, which is generated by zod
export const SCHEDULER_NAMES_AS_CONST = [
  'euler',
  'deis',
  'ddim',
  'ddpm',
  'dpmpp_2s',
  'dpmpp_2m',
  'heun',
  'kdpm_2',
  'lms',
  'pndm',
  'unipc',
  'euler_k',
  'dpmpp_2s_k',
  'dpmpp_2m_k',
  'heun_k',
  'lms_k',
  'euler_a',
  'kdpm_2_a',
] as const;

export const DEFAULT_SCHEDULER_NAME = 'euler';

export const SCHEDULER_NAMES: SchedulerParam[] = [...SCHEDULER_NAMES_AS_CONST];

export const SCHEDULER_SELECT_ITEMS: Record<
  (typeof SCHEDULER_NAMES)[number],
  SelectItem & { label: string; value: SchedulerParam; group: string }
> = {
  euler: { label: 'Euler', value: 'euler', group: 'Standard' },
  deis: { label: 'DEIS', value: 'deis', group: 'Standard' },
  ddim: { label: 'DDIM', value: 'ddim', group: 'Standard' },
  ddpm: { label: 'DDPM', value: 'ddpm', group: 'Standard' },
  dpmpp_2s: { label: 'DPM++ 2S', value: 'dpmpp_2s', group: 'Standard' },
  dpmpp_2m: { label: 'DPM++ 2M', value: 'dpmpp_2m', group: 'Standard' },
  heun: { label: 'Heun', value: 'heun', group: 'Standard' },
  kdpm_2: { label: 'KDPM 2', value: 'kdpm_2', group: 'Standard' },
  lms: { label: 'LMS', value: 'lms', group: 'Standard' },
  pndm: { label: 'PNDM', value: 'pndm', group: 'Standard' },
  unipc: { label: 'UniPC', value: 'unipc', group: 'Standard' },
  euler_k: { label: 'Euler Karras', value: 'euler_k', group: 'Karras' },
  dpmpp_2s_k: {
    label: 'DPM++ 2S Karras',
    value: 'dpmpp_2s_k',
    group: 'Karras',
  },
  dpmpp_2m_k: {
    label: 'DPM++ 2M Karras',
    value: 'dpmpp_2m_k',
    group: 'Karras',
  },
  heun_k: { label: 'Heun Karras', value: 'heun_k', group: 'Karras' },
  lms_k: { label: 'LMS Karras', value: 'lms_k', group: 'Karras' },
  euler_a: { label: 'Euler Ancestral', value: 'euler_a', group: 'Ancestral' },
  kdpm_2_a: {
    label: 'KDPM 2 Ancestral',
    value: 'kdpm_2_a',
    group: 'Ancestral',
  },
};

export type Scheduler = (typeof SCHEDULER_NAMES)[number];

// Valid upscaling levels
export const UPSCALING_LEVELS: Array<{ label: string; value: string }> = [
  { label: '2x', value: '2' },
  { label: '4x', value: '4' },
];
export const NUMPY_RAND_MIN = 0;

export const NUMPY_RAND_MAX = 2147483647;

export const FACETOOL_TYPES = ['gfpgan', 'codeformer'] as const;

export const NODE_MIN_WIDTH = 250;
